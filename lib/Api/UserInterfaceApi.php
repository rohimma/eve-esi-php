<?php
/**
 * UserInterfaceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * UserInterfaceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserInterfaceApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://esi.tech.ccp.is/latest');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return UserInterfaceApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation postUiAutopilotWaypoint
     *
     * Set Autopilot Waypoint
     *
     * @param int $destination_id The destination to travel to, can be solar system, station or structure&#39;s id (required)
     * @param bool $clear_other_waypoints Whether clean other waypoints beforing adding this one (required)
     * @param bool $add_to_beginning Whether this solar system should be added to the beginning of all waypoints (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postUiAutopilotWaypoint($destination_id, $clear_other_waypoints, $add_to_beginning, $datasource = null)
    {
        list($response) = $this->postUiAutopilotWaypointWithHttpInfo($destination_id, $clear_other_waypoints, $add_to_beginning, $datasource);
        return $response;
    }

    /**
     * Operation postUiAutopilotWaypointWithHttpInfo
     *
     * Set Autopilot Waypoint
     *
     * @param int $destination_id The destination to travel to, can be solar system, station or structure&#39;s id (required)
     * @param bool $clear_other_waypoints Whether clean other waypoints beforing adding this one (required)
     * @param bool $add_to_beginning Whether this solar system should be added to the beginning of all waypoints (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postUiAutopilotWaypointWithHttpInfo($destination_id, $clear_other_waypoints, $add_to_beginning, $datasource = null)
    {
        // verify the required parameter 'destination_id' is set
        if ($destination_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destination_id when calling postUiAutopilotWaypoint');
        }
        // verify the required parameter 'clear_other_waypoints' is set
        if ($clear_other_waypoints === null) {
            throw new \InvalidArgumentException('Missing the required parameter $clear_other_waypoints when calling postUiAutopilotWaypoint');
        }
        // verify the required parameter 'add_to_beginning' is set
        if ($add_to_beginning === null) {
            throw new \InvalidArgumentException('Missing the required parameter $add_to_beginning when calling postUiAutopilotWaypoint');
        }
        // parse inputs
        $resourcePath = "/ui/autopilot/waypoint/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($destination_id !== null) {
            $queryParams['destination_id'] = $this->apiClient->getSerializer()->toQueryValue($destination_id);
        }
        // query params
        if ($clear_other_waypoints !== null) {
            $queryParams['clear_other_waypoints'] = $this->apiClient->getSerializer()->toQueryValue($clear_other_waypoints);
        }
        // query params
        if ($add_to_beginning !== null) {
            $queryParams['add_to_beginning'] = $this->apiClient->getSerializer()->toQueryValue($add_to_beginning);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/ui/autopilot/waypoint/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PostUiAutopilotWaypointForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PostUiAutopilotWaypointInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postUiOpenwindowContract
     *
     * Open Contract Window
     *
     * @param int $contract_id The contract to open (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postUiOpenwindowContract($contract_id, $datasource = null)
    {
        list($response) = $this->postUiOpenwindowContractWithHttpInfo($contract_id, $datasource);
        return $response;
    }

    /**
     * Operation postUiOpenwindowContractWithHttpInfo
     *
     * Open Contract Window
     *
     * @param int $contract_id The contract to open (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postUiOpenwindowContractWithHttpInfo($contract_id, $datasource = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contract_id when calling postUiOpenwindowContract');
        }
        // parse inputs
        $resourcePath = "/ui/openwindow/contract/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($contract_id !== null) {
            $queryParams['contract_id'] = $this->apiClient->getSerializer()->toQueryValue($contract_id);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/ui/openwindow/contract/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PostUiOpenwindowContractForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PostUiOpenwindowContractInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postUiOpenwindowInformation
     *
     * Open Information Window
     *
     * @param int $target_id The target to open (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postUiOpenwindowInformation($target_id, $datasource = null)
    {
        list($response) = $this->postUiOpenwindowInformationWithHttpInfo($target_id, $datasource);
        return $response;
    }

    /**
     * Operation postUiOpenwindowInformationWithHttpInfo
     *
     * Open Information Window
     *
     * @param int $target_id The target to open (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postUiOpenwindowInformationWithHttpInfo($target_id, $datasource = null)
    {
        // verify the required parameter 'target_id' is set
        if ($target_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $target_id when calling postUiOpenwindowInformation');
        }
        // parse inputs
        $resourcePath = "/ui/openwindow/information/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($target_id !== null) {
            $queryParams['target_id'] = $this->apiClient->getSerializer()->toQueryValue($target_id);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/ui/openwindow/information/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PostUiOpenwindowInformationForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PostUiOpenwindowInformationInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postUiOpenwindowMarketdetails
     *
     * Open Market Details
     *
     * @param int $type_id The item type to open in market window (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postUiOpenwindowMarketdetails($type_id, $datasource = null)
    {
        list($response) = $this->postUiOpenwindowMarketdetailsWithHttpInfo($type_id, $datasource);
        return $response;
    }

    /**
     * Operation postUiOpenwindowMarketdetailsWithHttpInfo
     *
     * Open Market Details
     *
     * @param int $type_id The item type to open in market window (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postUiOpenwindowMarketdetailsWithHttpInfo($type_id, $datasource = null)
    {
        // verify the required parameter 'type_id' is set
        if ($type_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type_id when calling postUiOpenwindowMarketdetails');
        }
        // parse inputs
        $resourcePath = "/ui/openwindow/marketdetails/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($type_id !== null) {
            $queryParams['type_id'] = $this->apiClient->getSerializer()->toQueryValue($type_id);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/ui/openwindow/marketdetails/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PostUiOpenwindowMarketdetailsForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PostUiOpenwindowMarketdetailsInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postUiOpenwindowNewmail
     *
     * Open New Mail Window
     *
     * @param \Swagger\Client\Model\PostUiOpenwindowNewmailNewMail $new_mail The details of mail to create (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postUiOpenwindowNewmail($new_mail, $datasource = null)
    {
        list($response) = $this->postUiOpenwindowNewmailWithHttpInfo($new_mail, $datasource);
        return $response;
    }

    /**
     * Operation postUiOpenwindowNewmailWithHttpInfo
     *
     * Open New Mail Window
     *
     * @param \Swagger\Client\Model\PostUiOpenwindowNewmailNewMail $new_mail The details of mail to create (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postUiOpenwindowNewmailWithHttpInfo($new_mail, $datasource = null)
    {
        // verify the required parameter 'new_mail' is set
        if ($new_mail === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_mail when calling postUiOpenwindowNewmail');
        }
        // parse inputs
        $resourcePath = "/ui/openwindow/newmail/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($new_mail)) {
            $_tempBody = $new_mail;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/ui/openwindow/newmail/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PostUiOpenwindowNewmailForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PostUiOpenwindowNewmailUnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PostUiOpenwindowNewmailInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
